

import java.io.IOException;
import java.util.Iterator;
import java.util.StringTokenizer;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.TextInputFormat;
import org.apache.hadoop.mapred.TextOutputFormat;


public class WordCount{
public static class Map extends MapReduceBase implements Mapper<LongWritable,Text,Text,IntWritable>
{
@Override
public void map(LongWritable key ,Text Value,OutputCollector<Text,IntWritable>Output,Reporter reporter) throws IOException{
String line = value.toString();
StringTokenizer tokenizer = new StringTokenier(line);
While(tokenizer.hasMoreElements()){
        Value.set(tokenizer.nextToken())
        Output.collect(Value, new IntWritable(1))
           }
     }
}

//Reducer Class
Public static class Reduce extends MapReduceBase implements Reduce<Text,IntWritable,Text,IntWritable
{
Pubilic void reduce(Text key,Iterator<IntWritable>values,OutputCollector<Text,IntWritable>output,Reporter reporter) throws IOException{
Int sum = 0;
While(values.hasNext()){
  Sum +=values.next().get();}
Output.collect(key,new IntWritable(sum));
}
}
//Driver Class
public static void main(String[] args) throws Exception {
JobConf conf = new JobConf(WordCount.class); 
conf.setJobName("wordcount");
conf.setMapperClass(Map.class);
conf.setReducerClass(Reduce.class);
conf.setOutputKeyClass(Text.class);
conf.setOutputValueClass(IntWritable.class);
conf.setInputFormat(TextInputFormat.class); 
conf.setOutputFormat(TextOutputFormat.class);

FileInputFormat.setInputPaths(conf, new Path(args[0]));
FileOutputFormat.setOutputPath(conf, new Path(args[1]));
Path outputPath = new Path(args[1]); 
OutputPath.getFileSystem(conf).delete(outputPath); 
OutputPath.getFileSystem(conf).delete(outputPath); 
JobClient.runJob(conf);
	}
}
